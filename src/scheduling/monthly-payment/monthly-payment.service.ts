// src/scheduling/scheduling.service.ts
// (se voc√™ renomeou o arquivo, caso contr√°rio, continue em birthday.service.ts)

import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User, UserDocument } from 'src/users/schemas/user.schema';
import { NotificationsService } from 'src/notifications/notifications.service';
import dayjs from 'dayjs';

@Injectable()
export class MonthlyPaymentService {
  private readonly logger = new Logger(MonthlyPaymentService.name);

  constructor(
    @InjectModel(User.name) private readonly userModel: Model<UserDocument>,
    private readonly notificationsService: NotificationsService,
  ) {}

  @Cron(CronExpression.EVERY_DAY_AT_NOON, {
    timeZone: 'America/Sao_Paulo', // fuso hor√°rio
  })
  async handleMonthlyContributionCron() {
    this.logger.log('Executando cron job de contribui√ß√£o mensal...');

    const today = dayjs();
    const currentDay = today.date();

    const startOfMonth = today.startOf('month').toDate();
    const endOfMonth = today.endOf('month').toDate();

    const usersToNotify = await this.userModel
      .find({
        monthlyContributionDay: { $lt: currentDay }, // j√° passou do dia de contribui√ß√£o
        $nor: [
          {
            payments: {
              $elemMatch: {
                date: { $gte: startOfMonth, $lte: endOfMonth }, // j√° pagou no m√™s atual
              },
            },
          },
        ],
      })
      .exec();

    console.log(usersToNotify);

    if (usersToNotify.length === 0) {
      this.logger.log('Nenhuma contribui√ß√£o agendada para hoje.');
      return;
    }

    this.logger.log(`Encontrados ${usersToNotify.length} contribuintes para notificar hoje.`);

    for (const user of usersToNotify) {
      const payload = {
        userId: user._id.toString(),
        title: 'Lembrete de Contribui√ß√£o Mensal üí∞',
        body: `Ol√°, ${user.name}! N√£o se esque√ßa de sua contribui√ß√£o mensal.`,
        data: { type: 'monthly-contribution-reminder', url: 'http://colodedeuscwb.com.br/pix' },
      };

      try {
        await this.notificationsService.sendToUser(
          payload.userId,
          payload.title,
          payload.body,
          payload.data,
        );
        this.logger.log(`Notifica√ß√£o de contribui√ß√£o enviada para ${user.name}.`);
      } catch (error) {
        this.logger.error(`Falha ao enviar notifica√ß√£o de contribui√ß√£o para ${user.name}:`, error);
      }
    }
    this.logger.log('Cron job de contribui√ß√£o mensal finalizado.');
  }

  /**
   * CRON 2 ‚Äî Executa no √∫ltimo dia do m√™s √†s 10h da manh√£
   * Envia alerta final para quem ainda n√£o pagou neste m√™s.
   */
  @Cron('0 19 28-31 * *', {
    timeZone: 'America/Sao_Paulo',
  })
  async handleEndOfMonthReminderCron() {
    const today = dayjs();
    const lastDayOfMonth = today.endOf('month').date();

    // executa somente se HOJE for o √∫ltimo dia do m√™s
    if (today.date() !== lastDayOfMonth) return;

    this.logger.log('Executando cron job de √∫ltimo dia do m√™s (lembrete final)...');

    const startOfMonth = today.startOf('month').toDate();
    const endOfMonth = today.endOf('month').toDate();

    // total de usu√°rios
    const totalUsers = await this.userModel.countDocuments();

    // usu√°rios que j√° contribu√≠ram neste m√™s
    const usersWhoPaid = await this.userModel.countDocuments({
      payments: {
        $elemMatch: {
          date: { $gte: startOfMonth, $lte: endOfMonth },
        },
      },
    });

    // calcular porcentagem
    const paidPercentage = (usersWhoPaid / totalUsers) * 100;
    const remainingPercentage = 100 - paidPercentage;

    // buscar usu√°rios que ainda n√£o pagaram
    const usersToNotify = await this.userModel.find({
      $nor: [
        {
          payments: {
            $elemMatch: {
              date: { $gte: startOfMonth, $lte: endOfMonth },
            },
          },
        },
      ],
    });

    if (usersToNotify.length === 0) {
      this.logger.log('Todos os usu√°rios j√° contribu√≠ram este m√™s.');
      return;
    }

    this.logger.log(`Encontrados ${usersToNotify.length} usu√°rios que ainda n√£o pagaram.`);

    // üîî Envia notifica√ß√£o personalizada com porcentagem
    for (const user of usersToNotify) {
      const message = `Ol√°, ${user.name}! Hoje √© o √∫ltimo dia do m√™s. Fa√ßa sua contribui√ß√£o para continuar apoiando nossa miss√£o üôè
    
üí° Estamos com ${paidPercentage.toFixed(1)}% das contribui√ß√µes recebidas.
Faltam  ${remainingPercentage.toFixed(1)}% para alcan√ßarmos 100%!`;

      await this.sendNotification(user, '√öltimo dia para sua contribui√ß√£o mensal ‚è∞', message);
    }

    this.logger.log('Cron job de √∫ltimo dia do m√™s finalizado.');
  }

  private async sendNotification(user: any, title: string, body: string) {
    const payload = {
      userId: user._id.toString(),
      title,
      body,
      data: { type: 'monthly-contribution-reminder', url: 'http://colodedeuscwb.com.br/pix' },
    };

    try {
      await this.notificationsService.sendToUser(
        payload.userId,
        payload.title,
        payload.body,
        payload.data,
      );
      this.logger.log(`Notifica√ß√£o enviada para ${user.name}.`);
    } catch (error) {
      this.logger.error(`Erro ao enviar notifica√ß√£o para ${user.name}:`, error);
    }
  }
}
